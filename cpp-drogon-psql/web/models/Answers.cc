/**
 *
 *  Answers.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Answers.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::web;

const std::string Answers::Cols::_id = "id";
const std::string Answers::Cols::_question_id = "question_id";
const std::string Answers::Cols::_answer = "answer";
const std::string Answers::primaryKeyName = "";
const bool Answers::hasPrimaryKey = false;
const std::string Answers::tableName = "answers";

const std::vector<typename Answers::MetaData> Answers::metaData_={
{"id","int32_t","integer",4,1,0,1},
{"question_id","int32_t","integer",4,0,0,0},
{"answer","std::string","character varying",0,0,0,0}
};
const std::string &Answers::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Answers::Answers(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["question_id"].isNull())
        {
            questionId_=std::make_shared<int32_t>(r["question_id"].as<int32_t>());
        }
        if(!r["answer"].isNull())
        {
            answer_=std::make_shared<std::string>(r["answer"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 3 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            questionId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            answer_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Answers::Answers(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            questionId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            answer_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

Answers::Answers(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("question_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["question_id"].isNull())
        {
            questionId_=std::make_shared<int32_t>((int32_t)pJson["question_id"].asInt64());
        }
    }
    if(pJson.isMember("answer"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["answer"].isNull())
        {
            answer_=std::make_shared<std::string>(pJson["answer"].asString());
        }
    }
}

void Answers::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            questionId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            answer_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

void Answers::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("question_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["question_id"].isNull())
        {
            questionId_=std::make_shared<int32_t>((int32_t)pJson["question_id"].asInt64());
        }
    }
    if(pJson.isMember("answer"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["answer"].isNull())
        {
            answer_=std::make_shared<std::string>(pJson["answer"].asString());
        }
    }
}

const int32_t &Answers::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Answers::getId() const noexcept
{
    return id_;
}
void Answers::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}

const int32_t &Answers::getValueOfQuestionId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(questionId_)
        return *questionId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Answers::getQuestionId() const noexcept
{
    return questionId_;
}
void Answers::setQuestionId(const int32_t &pQuestionId) noexcept
{
    questionId_ = std::make_shared<int32_t>(pQuestionId);
    dirtyFlag_[1] = true;
}
void Answers::setQuestionIdToNull() noexcept
{
    questionId_.reset();
    dirtyFlag_[1] = true;
}

const std::string &Answers::getValueOfAnswer() const noexcept
{
    const static std::string defaultValue = std::string();
    if(answer_)
        return *answer_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Answers::getAnswer() const noexcept
{
    return answer_;
}
void Answers::setAnswer(const std::string &pAnswer) noexcept
{
    answer_ = std::make_shared<std::string>(pAnswer);
    dirtyFlag_[2] = true;
}
void Answers::setAnswer(std::string &&pAnswer) noexcept
{
    answer_ = std::make_shared<std::string>(std::move(pAnswer));
    dirtyFlag_[2] = true;
}
void Answers::setAnswerToNull() noexcept
{
    answer_.reset();
    dirtyFlag_[2] = true;
}

void Answers::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Answers::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "question_id",
        "answer"
    };
    return inCols;
}

void Answers::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getQuestionId())
        {
            binder << getValueOfQuestionId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getAnswer())
        {
            binder << getValueOfAnswer();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Answers::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    return ret;
}

void Answers::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getQuestionId())
        {
            binder << getValueOfQuestionId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getAnswer())
        {
            binder << getValueOfAnswer();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Answers::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getQuestionId())
    {
        ret["question_id"]=getValueOfQuestionId();
    }
    else
    {
        ret["question_id"]=Json::Value();
    }
    if(getAnswer())
    {
        ret["answer"]=getValueOfAnswer();
    }
    else
    {
        ret["answer"]=Json::Value();
    }
    return ret;
}

Json::Value Answers::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 3)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getQuestionId())
            {
                ret[pMasqueradingVector[1]]=getValueOfQuestionId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getAnswer())
            {
                ret[pMasqueradingVector[2]]=getValueOfAnswer();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getQuestionId())
    {
        ret["question_id"]=getValueOfQuestionId();
    }
    else
    {
        ret["question_id"]=Json::Value();
    }
    if(getAnswer())
    {
        ret["answer"]=getValueOfAnswer();
    }
    else
    {
        ret["answer"]=Json::Value();
    }
    return ret;
}

bool Answers::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("question_id"))
    {
        if(!validJsonOfField(1, "question_id", pJson["question_id"], err, true))
            return false;
    }
    if(pJson.isMember("answer"))
    {
        if(!validJsonOfField(2, "answer", pJson["answer"], err, true))
            return false;
    }
    return true;
}
bool Answers::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Answers::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    if(pJson.isMember("question_id"))
    {
        if(!validJsonOfField(1, "question_id", pJson["question_id"], err, false))
            return false;
    }
    if(pJson.isMember("answer"))
    {
        if(!validJsonOfField(2, "answer", pJson["answer"], err, false))
            return false;
    }
    return true;
}
bool Answers::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Answers::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson,
                               std::string &err,
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            else
            {
                err="The automatic primary key cannot be update";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}

